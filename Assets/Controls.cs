//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""action map"",
            ""id"": ""0276318b-54b2-4ee6-b364-45fd14db7db3"",
            ""actions"": [
                {
                    ""name"": ""Movemnet"",
                    ""type"": ""Value"",
                    ""id"": ""43c4a322-451b-4b75-9931-339bab08eb58"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""854efb45-638b-4180-b84b-057d63516c9e"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Restart"",
                    ""type"": ""Button"",
                    ""id"": ""24a0c9c8-1e6b-4276-8b42-e0291db7c52a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Exit"",
                    ""type"": ""Button"",
                    ""id"": ""f85466e4-993e-421c-9185-5c1cdba322ff"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Power"",
                    ""type"": ""Button"",
                    ""id"": ""3eb3c141-b995-46af-88a7-ee517f38fa0e"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""ab170f5b-3b5e-469b-bf23-73fab36a72c8"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movemnet"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""85f94edf-9abd-47d9-804f-98ea8168674b"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movemnet"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""d31ff33e-959b-4f51-8ba3-386a9935cf80"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movemnet"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""8e957cc8-99f3-4242-b8fd-c746fadde848"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movemnet"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""4855f770-2e7f-4723-99ce-a3b3fb01937b"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movemnet"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""1c571258-64fa-40af-8ccb-824afcb34a0c"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6b58b254-0c13-46fd-b5d5-704e53612b3d"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Restart"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4442b81e-8990-4ad9-af4b-f832b05fda41"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Exit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cb4f4b8b-28c6-4ea9-936e-419f6fef73ab"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Power"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // action map
        m_actionmap = asset.FindActionMap("action map", throwIfNotFound: true);
        m_actionmap_Movemnet = m_actionmap.FindAction("Movemnet", throwIfNotFound: true);
        m_actionmap_Jump = m_actionmap.FindAction("Jump", throwIfNotFound: true);
        m_actionmap_Restart = m_actionmap.FindAction("Restart", throwIfNotFound: true);
        m_actionmap_Exit = m_actionmap.FindAction("Exit", throwIfNotFound: true);
        m_actionmap_Power = m_actionmap.FindAction("Power", throwIfNotFound: true);
    }

    ~@Controls()
    {
        UnityEngine.Debug.Assert(!m_actionmap.enabled, "This will cause a leak and performance issues, Controls.actionmap.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // action map
    private readonly InputActionMap m_actionmap;
    private List<IActionmapActions> m_ActionmapActionsCallbackInterfaces = new List<IActionmapActions>();
    private readonly InputAction m_actionmap_Movemnet;
    private readonly InputAction m_actionmap_Jump;
    private readonly InputAction m_actionmap_Restart;
    private readonly InputAction m_actionmap_Exit;
    private readonly InputAction m_actionmap_Power;
    public struct ActionmapActions
    {
        private @Controls m_Wrapper;
        public ActionmapActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movemnet => m_Wrapper.m_actionmap_Movemnet;
        public InputAction @Jump => m_Wrapper.m_actionmap_Jump;
        public InputAction @Restart => m_Wrapper.m_actionmap_Restart;
        public InputAction @Exit => m_Wrapper.m_actionmap_Exit;
        public InputAction @Power => m_Wrapper.m_actionmap_Power;
        public InputActionMap Get() { return m_Wrapper.m_actionmap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ActionmapActions set) { return set.Get(); }
        public void AddCallbacks(IActionmapActions instance)
        {
            if (instance == null || m_Wrapper.m_ActionmapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ActionmapActionsCallbackInterfaces.Add(instance);
            @Movemnet.started += instance.OnMovemnet;
            @Movemnet.performed += instance.OnMovemnet;
            @Movemnet.canceled += instance.OnMovemnet;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Restart.started += instance.OnRestart;
            @Restart.performed += instance.OnRestart;
            @Restart.canceled += instance.OnRestart;
            @Exit.started += instance.OnExit;
            @Exit.performed += instance.OnExit;
            @Exit.canceled += instance.OnExit;
            @Power.started += instance.OnPower;
            @Power.performed += instance.OnPower;
            @Power.canceled += instance.OnPower;
        }

        private void UnregisterCallbacks(IActionmapActions instance)
        {
            @Movemnet.started -= instance.OnMovemnet;
            @Movemnet.performed -= instance.OnMovemnet;
            @Movemnet.canceled -= instance.OnMovemnet;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Restart.started -= instance.OnRestart;
            @Restart.performed -= instance.OnRestart;
            @Restart.canceled -= instance.OnRestart;
            @Exit.started -= instance.OnExit;
            @Exit.performed -= instance.OnExit;
            @Exit.canceled -= instance.OnExit;
            @Power.started -= instance.OnPower;
            @Power.performed -= instance.OnPower;
            @Power.canceled -= instance.OnPower;
        }

        public void RemoveCallbacks(IActionmapActions instance)
        {
            if (m_Wrapper.m_ActionmapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IActionmapActions instance)
        {
            foreach (var item in m_Wrapper.m_ActionmapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ActionmapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ActionmapActions @actionmap => new ActionmapActions(this);
    public interface IActionmapActions
    {
        void OnMovemnet(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnRestart(InputAction.CallbackContext context);
        void OnExit(InputAction.CallbackContext context);
        void OnPower(InputAction.CallbackContext context);
    }
}
